{"ast":null,"code":"// import { catchError } from 'rxjs/internal/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError, catchError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //Declaring the api url that will provide data for the client app\n\nconst apiUrl = 'https://mymovieapp08.herokuapp.com/'; // Get token from local storage for requests\n\nconst token = localStorage.getItem('token'); // Get username from localStorage for URLs\n\nconst username = localStorage.getItem('user');\nexport let FetchApiDataService = /*#__PURE__*/(() => {\n  class FetchApiDataService {\n    // Inject the HttpClient module to the constructor params\n    // This will provide HttpClient to the entire class, making it available via this.http\n    constructor(http) {\n      this.http = http;\n    } // Making the api call for the user registration endpoint\n\n\n    userRegistration(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + `users`, userDetails).pipe(catchError(this.handleError));\n    } //User Login\n\n\n    userLogin(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + `login`, userDetails).pipe(catchError(this.handleError));\n    } // Get All Movies\n\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // Get a Single Movie\n\n\n    getOneMovie(title) {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + `/movies/${title}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // Get Director\n\n\n    getDirector(directorName) {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + `directors/${directorName}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // Get Genre\n\n\n    getGenre(genre) {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + `genres/${genre}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // Get User\n\n\n    getUser(Username) {\n      const token = localStorage.getItem('token');\n      const username = localStorage.getItem('user');\n      return this.http.get(apiUrl + `users/${username}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // Add favourite movie \n\n\n    addFavMovie(id) {\n      const token = localStorage.getItem('token');\n      const username = localStorage.getItem('user');\n      return this.http.post(apiUrl + `users/${username}/movies/${id}`, null, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // Delete favourite movie\n\n\n    deleteFavMovie(id) {\n      const token = localStorage.getItem('token');\n      const username = localStorage.getItem('user');\n      return this.http.delete(apiUrl + `users/${username}/movies/${id}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // Edit User Profile\n\n\n    editUserProfile(userData) {\n      const token = localStorage.getItem('token');\n      const Username = localStorage.getItem('user');\n      return this.http.put(apiUrl + `users/${Username}`, userData, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    deleteUserProfile() {\n      const token = localStorage.getItem('token');\n      const username = localStorage.getItem('user');\n      return this.http.delete(apiUrl + `users/${username}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(data) {\n      return data || {};\n    } // Handle error function\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('some error occured:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something went wrong; please try again later.');\n    }\n\n  }\n\n  FetchApiDataService.ɵfac = function FetchApiDataService_Factory(t) {\n    return new (t || FetchApiDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FetchApiDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FetchApiDataService,\n    factory: FetchApiDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return FetchApiDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}